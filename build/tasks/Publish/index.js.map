{"version":3,"sources":["../../../src/tasks/Publish/index.js"],"names":["PublishTask","run","registry","pkgPath","process","cwd","emit","readPackageManifest","pkg","gitpkgRegistryURL","gitpkgRegistry","gitpkgPackage","name","version"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,MAAMA,WAAN,wBAA+B;AAC5C,QAAMC,GAAN,CAAU,EAAEC,QAAF,EAAYC,UAAUC,QAAQC,GAAR,EAAtB,KAAwC,EAAlD,EAAsD;AACpD,SAAKC,IAAL,CAAU,SAAV,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,yCAA3B;AACA;AACA,UAAM,KAAKC,mBAAL,CAAyBJ,OAAzB,CAAN;AACA,SAAKG,IAAL,CAAU,SAAV,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,gCAA3B;AACA;AACA;AACA,UAAM,mCAAoB,YAApB,EAAkC,KAAKE,GAAvC,EAA4CL,OAA5C,EAAqD,YAAY;AACrE,YAAM,KAAKI,mBAAL,CAAyBJ,OAAzB,CAAN;AACD,KAFK,CAAN;AAGA,UAAM,mCAAoB,gBAApB,EAAsC,KAAKK,GAA3C,EAAgDL,OAAhD,EAAyD,YAAY;AACzE,YAAM,KAAKI,mBAAL,CAAyBJ,OAAzB,CAAN;AACD,KAFK,CAAN;AAGA,UAAM,mCAAoB,SAApB,EAA+B,KAAKK,GAApC,EAAyCL,OAAzC,EAAkD,YAAY;AAClE,YAAM,KAAKI,mBAAL,CAAyBJ,OAAzB,CAAN;AACD,KAFK,CAAN;AAGA;AACA,SAAKG,IAAL,CAAU,SAAV,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,uBAA3B;AACA,UAAM,8BAAe,KAAKE,GAApB,EAAyBL,OAAzB,CAAN;AACA,SAAKG,IAAL,CAAU,SAAV,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,uBAA3B;AACA;AACA;AACA,UAAMG,oBAAoB,MAAM,8BAAeP,QAAf,EAAyB,KAAKM,GAA9B,EAAmCL,OAAnC,CAAhC;AACA,UAAM,6BAAc,KAAKK,GAAnB,EAAwBL,OAAxB,EAAiCM,iBAAjC,CAAN;AACA;AACA,SAAKH,IAAL,CAAU,SAAV,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,gCAA3B;AACA,UAAM,mCAAoB,SAApB,EAA+B,KAAKE,GAApC,EAAyCL,OAAzC,CAAN;AACA,UAAM,mCAAoB,aAApB,EAAmC,KAAKK,GAAxC,EAA6CL,OAA7C,CAAN;;AAEA,WAAO;AACLO,sBAAgBD,iBADX;AAELE,qBAAe,6BAAc,KAAKH,GAAnB,CAFV;AAGLI,YAAM,KAAKJ,GAAL,CAASI,IAHV;AAILC,eAAS,KAAKL,GAAL,CAASK;AAJb,KAAP;AAMD;AApC2C;kBAAzBb,W","file":"index.js","sourcesContent":["import Task from '../Task';\nimport execLifecycleScript from './exec-lifecycle-script';\nimport preparePackage from './prepare-package';\nimport uploadPackage from './upload-package';\nimport getRegistryURL from './get-registry-url';\nimport getGitTagName from './get-git-tag-name';\n\nexport default class PublishTask extends Task {\n  async run({ registry, pkgPath = process.cwd() } = {}) {\n    this.emit('subtask', 1, 5, 'üëÄ  Reading and validating package.json');\n    // 1 - Read and validate package.json.\n    await this.readPackageManifest(pkgPath);\n    this.emit('subtask', 2, 5, 'üèá  Running prepublish scripts');\n    // 2 - Run prepublish scripts.\n    // NOTE: this scripts might modify the package.json so we need to reload it.\n    await execLifecycleScript('prepublish', this.pkg, pkgPath, async () => {\n      await this.readPackageManifest(pkgPath);\n    });\n    await execLifecycleScript('prepublishOnly', this.pkg, pkgPath, async () => {\n      await this.readPackageManifest(pkgPath);\n    });\n    await execLifecycleScript('prepare', this.pkg, pkgPath, async () => {\n      await this.readPackageManifest(pkgPath);\n    });\n    // 3 - Prepare package: npm pack and untar tarball to temp dir.\n    this.emit('subtask', 3, 5, '‚öôÔ∏è  Preparing package');\n    await preparePackage(this.pkg, pkgPath);\n    this.emit('subtask', 4, 5, '‚¨ÜÔ∏è  Uploading package');\n    // 4 - Upload package: create git tag from temp dir\n    // and push to resolved gitpkg registry.\n    const gitpkgRegistryURL = await getRegistryURL(registry, this.pkg, pkgPath);\n    await uploadPackage(this.pkg, pkgPath, gitpkgRegistryURL);\n    // 5 - Run postpublish scripts.\n    this.emit('subtask', 5, 5, 'üèá Running postpublish scripts');\n    await execLifecycleScript('publish', this.pkg, pkgPath);\n    await execLifecycleScript('postpublish', this.pkg, pkgPath);\n\n    return {\n      gitpkgRegistry: gitpkgRegistryURL,\n      gitpkgPackage: getGitTagName(this.pkg),\n      name: this.pkg.name,\n      version: this.pkg.version\n    };\n  }\n}\n"]}