{"version":3,"sources":["../../../src/tasks/Publish/upload-package.js"],"names":["uploadPackage","pkg","pkgPath","registry","pkgTempDir","pkgTempDirPkg","join","gitpkgPackageName","gitTagLatest","err","gitErrorExists","exists","stderr","indexOf","Error","msg","match"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,eAAeA,aAAf,CAA6BC,GAA7B,EAAkCC,OAAlC,EAA2CC,QAA3C,EAAqD;AAClE,QAAMC,aAAa,MAAM,0BAAWH,GAAX,CAAzB;AACA,QAAMI,gBAAgB,eAAKC,IAAL,CAAUF,UAAV,EAAsB,SAAtB,CAAtB;AACA,QAAMG,oBAAoB,6BAAcN,GAAd,CAA1B;AACA,QAAMO,eAAe,+BAAgBP,GAAhB,CAArB;AACA,QAAM,6BAAc,UAAd,EAA0BI,aAA1B,CAAN;AACA,QAAM,6BAAc,WAAd,EAA2BA,aAA3B,CAAN;AACA,QAAM,6BAAc,sBAAd,EAAsCA,aAAtC,CAAN;AACA,QAAM,6BAAe,yBAAwBF,QAAS,EAAhD,EAAmDE,aAAnD,CAAN;AACA,QAAM,6BAAe,WAAUE,iBAAkB,EAA3C,EAA8CF,aAA9C,CAAN;AACA,MAAI;AACF,UAAM,6BAAe,mBAAkBE,iBAAkB,EAAnD,EAAsDF,aAAtD,CAAN;AACD,GAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,UAAMC,iBAAiB,qEAAvB;AACA,UAAMC,SAASF,IAAIG,MAAJ,CAAWC,OAAX,CAAmBH,cAAnB,IAAqC,CAAC,CAArD;AACA,QAAIC,MAAJ,EAAY;AACV,YAAM,IAAIG,KAAJ,CAAW,gBAAeP,iBAAkB,wBAAuBJ,QAAS,IAA5E,CAAN;AACD;AACD,UAAMM,GAAN;AACD;AACD;AACA,MAAI;AACF,UAAM,6BAAe,4BAA2BD,YAAa,EAAvD,EAA0DH,aAA1D,CAAN;AACD,GAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,UAAMM,MAAM,kDAAZ;AACA,QAAI,CAACN,IAAIG,MAAJ,CAAWI,KAAX,CAAiBD,GAAjB,CAAL,EAA4B;AAC1B,YAAMN,GAAN,CAD0B,CACf;AACZ;AACF;AACD,QAAM,6BAAe,WAAUD,YAAa,EAAtC,EAAyCH,aAAzC,CAAN;AACA,QAAM,6BAAe,iBAAf,EAAiCA,aAAjC,CAAN;AACD,C","file":"upload-package.js","sourcesContent":["import path from 'path';\nimport execLikeShell from './exec-like-shell';\nimport getTempDir from './get-temp-dir';\nimport getGitTagName from './get-git-tag-name';\nimport getGitTagLatest from './get-git-tag-latest';\n\nexport default async function uploadPackage(pkg, pkgPath, registry) {\n  const pkgTempDir = await getTempDir(pkg);\n  const pkgTempDirPkg = path.join(pkgTempDir, 'package');\n  const gitpkgPackageName = getGitTagName(pkg);\n  const gitTagLatest = getGitTagLatest(pkg);\n  await execLikeShell('git init', pkgTempDirPkg);\n  await execLikeShell('git add .', pkgTempDirPkg);\n  await execLikeShell('git commit -m gitpkg', pkgTempDirPkg);\n  await execLikeShell(`git remote add origin ${registry}`, pkgTempDirPkg);\n  await execLikeShell(`git tag ${gitpkgPackageName}`, pkgTempDirPkg);\n  try {\n    await execLikeShell(`git push origin ${gitpkgPackageName}`, pkgTempDirPkg);\n  } catch (err) {\n    const gitErrorExists = 'Updates were rejected because the tag already exists in the remote.';\n    const exists = err.stderr.indexOf(gitErrorExists) > -1;\n    if (exists) {\n      throw new Error(`The git tag \"${gitpkgPackageName}\" already exists in \"${registry}\".`);\n    }\n    throw err;\n  }\n  // move 'latest' tag for module ${gitTagLatest} to current setting\n  try {\n    await execLikeShell(`git push --delete origin ${gitTagLatest}`, pkgTempDirPkg);\n  } catch (err) {\n    const msg = /unable to delete '.*': remote ref does not exist/;\n    if (!err.stderr.match(msg)) {\n      throw err; // unknown error, bubble up\n    }\n  }\n  await execLikeShell(`git tag ${gitTagLatest}`, pkgTempDirPkg);\n  await execLikeShell(`git push --tags`, pkgTempDirPkg);\n}\n"]}