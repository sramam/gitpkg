{"version":3,"sources":["../../../src/tasks/Publish/extract-tarball.js"],"names":["extractTarball","tarballPath","destPath","stream","createReadStream","pipe","Unzip","extract","Promise","resolve","reject","err"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,eAAeA,cAAf,CAA8BC,WAA9B,EAA2CC,QAA3C,EAAqD;AAClE,QAAMC,SAAS,aACZC,gBADY,CACKH,WADL,EAEZI,IAFY,CAEP,IAAI,eAAKC,KAAT,EAFO,EAGZD,IAHY,CAGP,gBAAIE,OAAJ,CAAYL,QAAZ,CAHO,CAAf;;AAKA,SAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,+BAAIP,MAAJ,EAAYQ,OAAO;AACjB,UAAIA,GAAJ,EAAS;AACP,eAAOD,OAAOC,GAAP,CAAP;AACD;AACD,aAAOF,SAAP;AACD,KALD;AAMD,GAPM,CAAP;AAQD,C","file":"extract-tarball.js","sourcesContent":["import fs from 'fs';\nimport end from 'end-of-stream';\nimport tar from 'tar-fs';\nimport zlib from 'zlib';\n\nexport default async function extractTarball(tarballPath, destPath) {\n  const stream = fs\n    .createReadStream(tarballPath)\n    .pipe(new zlib.Unzip())\n    .pipe(tar.extract(destPath));\n\n  return new Promise((resolve, reject) => {\n    end(stream, err => {\n      if (err) {\n        return reject(err);\n      }\n      return resolve();\n    });\n  });\n}\n"]}